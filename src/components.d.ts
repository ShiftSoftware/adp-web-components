/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ErrorKeys, LanguageKeys } from "./global/types/locales/index";
import { PartInformation } from "./global/types/part-information";
import { DotNetObjectReference, MockJson } from "./global/types/components";
import { ServiceItem, VehicleInformation } from "./global/types/vehicle-information";
import { ActiveElement } from "./components/part-lookup/part-lookup";
import { ActiveElement as ActiveElement1 } from "./components/vehicle-lookup/vehicle-lookup";
export { ErrorKeys, LanguageKeys } from "./global/types/locales/index";
export { PartInformation } from "./global/types/part-information";
export { DotNetObjectReference, MockJson } from "./global/types/components";
export { ServiceItem, VehicleInformation } from "./global/types/vehicle-information";
export { ActiveElement } from "./components/part-lookup/part-lookup";
export { ActiveElement as ActiveElement1 } from "./components/vehicle-lookup/vehicle-lookup";
export namespace Components {
    interface DeadStockLookup {
        "baseUrl": string;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (partNumber?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: PartInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<PartInformation>) => Promise<void>;
    }
    interface DistributorLookup {
        "baseUrl": string;
        "errorCallback": (errorMessage: string) => void;
        "fetchData": (partNumber?: string, headers?: any) => Promise<void>;
        "hiddenFields"?: string;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString": string;
        "setData": (newData: PartInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<PartInformation>) => Promise<void>;
    }
    interface DynamicClaim {
        "baseUrl": string;
        "completeClaim": () => Promise<void>;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface DynamicRedeem {
        "canceledItems"?: ServiceItem[];
        "getQrValue": () => Promise<string>;
        "handleQrChanges"?: (code: string) => void;
        "handleScanner"?: (code: string) => void;
        "item"?: ServiceItem;
        "language": LanguageKeys;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "quite": () => Promise<void>;
        "unInvoicedByBrokerName"?: string;
        "vin"?: string;
    }
    interface FormInput {
        "class": string;
        "containerClass": string;
        "disabled": boolean;
        "errorClass": string;
        "errorMessage": string;
        "isError": boolean;
        "label": string;
        "labelClass": string;
        "name": string;
    }
    interface GeneralInquiryForm {
    }
    interface ManufacturerLookup {
        "baseUrl": string;
        "errorCallback": (errorMessage: string) => void;
        "fetchData": (partNumber?: string, headers?: any) => Promise<void>;
        "headerTitle": string;
        "hiddenFields": string;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString": string;
        "setData": (newData: PartInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<PartInformation>) => Promise<void>;
    }
    interface PaintThickness {
        "baseUrl": string;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface PartLookup {
        "activeElement"?: ActiveElement;
        "baseUrl": string;
        "blazorErrorStateListener": string;
        "blazorOnLoadingStateChange": string;
        "childrenProps"?: string | Object;
        "errorStateListener"?: (newError: string) => void;
        "fetchPartNumber": (partNumber: string, quantity?: string, headers?: any) => Promise<string>;
        "language": LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString": string;
        "setBlazorRef": (newBlazorRef: DotNetObjectReference) => Promise<void>;
    }
    interface ServiceHistory {
        "baseUrl": string;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface VehicleAccessories {
        "baseUrl": string;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface VehicleLookup {
        "activeElement"?: ActiveElement1;
        "baseUrl": string;
        "blazorErrorStateListener": string;
        "blazorOnLoadingStateChange": string;
        "childrenProps"?: string | Object;
        "errorStateListener"?: (newError: string) => void;
        "fetchVin": (vin: string, headers?: any) => Promise<string>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString": string;
        "setBlazorRef": (newBlazorRef: DotNetObjectReference) => Promise<void>;
    }
    interface VehicleSpecification {
        "baseUrl": string;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface WarrantyDetails {
        "baseUrl": string;
        "brandIntegrationId": string;
        "cityId"?: string;
        "cityIntegrationId"?: string;
        "companyBranchId"?: string;
        "companyBranchIntegrationId"?: string;
        "companyId"?: string;
        "companyIntegrationId"?: string;
        "customerEmail"?: string;
        "customerName"?: string;
        "customerPhone"?: string;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "recaptchaKey": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
        "showSsc": boolean;
        "showWarranty": boolean;
        "unauthorizedSscLookupBaseUrl": string;
        "unauthorizedSscLookupQueryString": string;
        "userId"?: string;
    }
}
export interface FormInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFormInputElement;
}
declare global {
    interface HTMLDeadStockLookupElement extends Components.DeadStockLookup, HTMLStencilElement {
    }
    var HTMLDeadStockLookupElement: {
        prototype: HTMLDeadStockLookupElement;
        new (): HTMLDeadStockLookupElement;
    };
    interface HTMLDistributorLookupElement extends Components.DistributorLookup, HTMLStencilElement {
    }
    var HTMLDistributorLookupElement: {
        prototype: HTMLDistributorLookupElement;
        new (): HTMLDistributorLookupElement;
    };
    interface HTMLDynamicClaimElement extends Components.DynamicClaim, HTMLStencilElement {
    }
    var HTMLDynamicClaimElement: {
        prototype: HTMLDynamicClaimElement;
        new (): HTMLDynamicClaimElement;
    };
    interface HTMLDynamicRedeemElement extends Components.DynamicRedeem, HTMLStencilElement {
    }
    var HTMLDynamicRedeemElement: {
        prototype: HTMLDynamicRedeemElement;
        new (): HTMLDynamicRedeemElement;
    };
    interface HTMLFormInputElementEventMap {
        "onInput": any;
    }
    interface HTMLFormInputElement extends Components.FormInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFormInputElementEventMap>(type: K, listener: (this: HTMLFormInputElement, ev: FormInputCustomEvent<HTMLFormInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFormInputElementEventMap>(type: K, listener: (this: HTMLFormInputElement, ev: FormInputCustomEvent<HTMLFormInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFormInputElement: {
        prototype: HTMLFormInputElement;
        new (): HTMLFormInputElement;
    };
    interface HTMLGeneralInquiryFormElement extends Components.GeneralInquiryForm, HTMLStencilElement {
    }
    var HTMLGeneralInquiryFormElement: {
        prototype: HTMLGeneralInquiryFormElement;
        new (): HTMLGeneralInquiryFormElement;
    };
    interface HTMLManufacturerLookupElement extends Components.ManufacturerLookup, HTMLStencilElement {
    }
    var HTMLManufacturerLookupElement: {
        prototype: HTMLManufacturerLookupElement;
        new (): HTMLManufacturerLookupElement;
    };
    interface HTMLPaintThicknessElement extends Components.PaintThickness, HTMLStencilElement {
    }
    var HTMLPaintThicknessElement: {
        prototype: HTMLPaintThicknessElement;
        new (): HTMLPaintThicknessElement;
    };
    interface HTMLPartLookupElement extends Components.PartLookup, HTMLStencilElement {
    }
    var HTMLPartLookupElement: {
        prototype: HTMLPartLookupElement;
        new (): HTMLPartLookupElement;
    };
    interface HTMLServiceHistoryElement extends Components.ServiceHistory, HTMLStencilElement {
    }
    var HTMLServiceHistoryElement: {
        prototype: HTMLServiceHistoryElement;
        new (): HTMLServiceHistoryElement;
    };
    interface HTMLVehicleAccessoriesElement extends Components.VehicleAccessories, HTMLStencilElement {
    }
    var HTMLVehicleAccessoriesElement: {
        prototype: HTMLVehicleAccessoriesElement;
        new (): HTMLVehicleAccessoriesElement;
    };
    interface HTMLVehicleLookupElement extends Components.VehicleLookup, HTMLStencilElement {
    }
    var HTMLVehicleLookupElement: {
        prototype: HTMLVehicleLookupElement;
        new (): HTMLVehicleLookupElement;
    };
    interface HTMLVehicleSpecificationElement extends Components.VehicleSpecification, HTMLStencilElement {
    }
    var HTMLVehicleSpecificationElement: {
        prototype: HTMLVehicleSpecificationElement;
        new (): HTMLVehicleSpecificationElement;
    };
    interface HTMLWarrantyDetailsElement extends Components.WarrantyDetails, HTMLStencilElement {
    }
    var HTMLWarrantyDetailsElement: {
        prototype: HTMLWarrantyDetailsElement;
        new (): HTMLWarrantyDetailsElement;
    };
    interface HTMLElementTagNameMap {
        "dead-stock-lookup": HTMLDeadStockLookupElement;
        "distributor-lookup": HTMLDistributorLookupElement;
        "dynamic-claim": HTMLDynamicClaimElement;
        "dynamic-redeem": HTMLDynamicRedeemElement;
        "form-input": HTMLFormInputElement;
        "general-inquiry-form": HTMLGeneralInquiryFormElement;
        "manufacturer-lookup": HTMLManufacturerLookupElement;
        "paint-thickness": HTMLPaintThicknessElement;
        "part-lookup": HTMLPartLookupElement;
        "service-history": HTMLServiceHistoryElement;
        "vehicle-accessories": HTMLVehicleAccessoriesElement;
        "vehicle-lookup": HTMLVehicleLookupElement;
        "vehicle-specification": HTMLVehicleSpecificationElement;
        "warranty-details": HTMLWarrantyDetailsElement;
    }
}
declare namespace LocalJSX {
    interface DeadStockLookup {
        "baseUrl"?: string;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface DistributorLookup {
        "baseUrl"?: string;
        "errorCallback"?: (errorMessage: string) => void;
        "hiddenFields"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString"?: string;
    }
    interface DynamicClaim {
        "baseUrl"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface DynamicRedeem {
        "canceledItems"?: ServiceItem[];
        "handleQrChanges"?: (code: string) => void;
        "handleScanner"?: (code: string) => void;
        "item"?: ServiceItem;
        "language"?: LanguageKeys;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "unInvoicedByBrokerName"?: string;
        "vin"?: string;
    }
    interface FormInput {
        "class"?: string;
        "containerClass"?: string;
        "disabled"?: boolean;
        "errorClass"?: string;
        "errorMessage"?: string;
        "isError"?: boolean;
        "label"?: string;
        "labelClass"?: string;
        "name"?: string;
        "onOnInput"?: (event: FormInputCustomEvent<any>) => void;
    }
    interface GeneralInquiryForm {
    }
    interface ManufacturerLookup {
        "baseUrl"?: string;
        "errorCallback"?: (errorMessage: string) => void;
        "headerTitle"?: string;
        "hiddenFields"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString"?: string;
    }
    interface PaintThickness {
        "baseUrl"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface PartLookup {
        "activeElement"?: ActiveElement;
        "baseUrl"?: string;
        "blazorErrorStateListener"?: string;
        "blazorOnLoadingStateChange"?: string;
        "childrenProps"?: string | Object;
        "errorStateListener"?: (newError: string) => void;
        "language"?: LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface ServiceHistory {
        "baseUrl"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleAccessories {
        "baseUrl"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleLookup {
        "activeElement"?: ActiveElement1;
        "baseUrl"?: string;
        "blazorErrorStateListener"?: string;
        "blazorOnLoadingStateChange"?: string;
        "childrenProps"?: string | Object;
        "errorStateListener"?: (newError: string) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleSpecification {
        "baseUrl"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface WarrantyDetails {
        "baseUrl"?: string;
        "brandIntegrationId"?: string;
        "cityId"?: string;
        "cityIntegrationId"?: string;
        "companyBranchId"?: string;
        "companyBranchIntegrationId"?: string;
        "companyId"?: string;
        "companyIntegrationId"?: string;
        "customerEmail"?: string;
        "customerName"?: string;
        "customerPhone"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
        "recaptchaKey"?: string;
        "showSsc"?: boolean;
        "showWarranty"?: boolean;
        "unauthorizedSscLookupBaseUrl"?: string;
        "unauthorizedSscLookupQueryString"?: string;
        "userId"?: string;
    }
    interface IntrinsicElements {
        "dead-stock-lookup": DeadStockLookup;
        "distributor-lookup": DistributorLookup;
        "dynamic-claim": DynamicClaim;
        "dynamic-redeem": DynamicRedeem;
        "form-input": FormInput;
        "general-inquiry-form": GeneralInquiryForm;
        "manufacturer-lookup": ManufacturerLookup;
        "paint-thickness": PaintThickness;
        "part-lookup": PartLookup;
        "service-history": ServiceHistory;
        "vehicle-accessories": VehicleAccessories;
        "vehicle-lookup": VehicleLookup;
        "vehicle-specification": VehicleSpecification;
        "warranty-details": WarrantyDetails;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dead-stock-lookup": LocalJSX.DeadStockLookup & JSXBase.HTMLAttributes<HTMLDeadStockLookupElement>;
            "distributor-lookup": LocalJSX.DistributorLookup & JSXBase.HTMLAttributes<HTMLDistributorLookupElement>;
            "dynamic-claim": LocalJSX.DynamicClaim & JSXBase.HTMLAttributes<HTMLDynamicClaimElement>;
            "dynamic-redeem": LocalJSX.DynamicRedeem & JSXBase.HTMLAttributes<HTMLDynamicRedeemElement>;
            "form-input": LocalJSX.FormInput & JSXBase.HTMLAttributes<HTMLFormInputElement>;
            "general-inquiry-form": LocalJSX.GeneralInquiryForm & JSXBase.HTMLAttributes<HTMLGeneralInquiryFormElement>;
            "manufacturer-lookup": LocalJSX.ManufacturerLookup & JSXBase.HTMLAttributes<HTMLManufacturerLookupElement>;
            "paint-thickness": LocalJSX.PaintThickness & JSXBase.HTMLAttributes<HTMLPaintThicknessElement>;
            "part-lookup": LocalJSX.PartLookup & JSXBase.HTMLAttributes<HTMLPartLookupElement>;
            "service-history": LocalJSX.ServiceHistory & JSXBase.HTMLAttributes<HTMLServiceHistoryElement>;
            "vehicle-accessories": LocalJSX.VehicleAccessories & JSXBase.HTMLAttributes<HTMLVehicleAccessoriesElement>;
            "vehicle-lookup": LocalJSX.VehicleLookup & JSXBase.HTMLAttributes<HTMLVehicleLookupElement>;
            "vehicle-specification": LocalJSX.VehicleSpecification & JSXBase.HTMLAttributes<HTMLVehicleSpecificationElement>;
            "warranty-details": LocalJSX.WarrantyDetails & JSXBase.HTMLAttributes<HTMLWarrantyDetailsElement>;
        }
    }
}
