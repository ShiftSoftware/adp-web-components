/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LanguageKeys } from "./global/types/locale";
import { ErrorKeys } from "./global/lib/get-local-language";
import { PartInformation } from "./global/types/part-information";
import { DotNetObjectReference, MockJson } from "./global/types/components";
import { FormHook } from "./global/lib/form-hook";
import { InputParams } from "./global/types/general";
import { FormElementMapper, FormFieldParams, FormSelectFetcher, LocaleFormKeys, StructureObject } from "./global/types/forms";
import { InformationTableColumn } from "./components/components/information-table";
import { ActiveElement } from "./components/part-lookup/part-lookup";
import { AccordionItem } from "./components/components/shift-accordion";
import { ClaimPayload, ServiceItem, VehicleInformation } from "./global/types/vehicle-information";
import { ClaimFormType } from "./locales/vehicleLookup/claimableItems/type";
import { ActiveElement as ActiveElement1 } from "./components/vehicle-lookup/vehicle-lookup";
export { LanguageKeys } from "./global/types/locale";
export { ErrorKeys } from "./global/lib/get-local-language";
export { PartInformation } from "./global/types/part-information";
export { DotNetObjectReference, MockJson } from "./global/types/components";
export { FormHook } from "./global/lib/form-hook";
export { InputParams } from "./global/types/general";
export { FormElementMapper, FormFieldParams, FormSelectFetcher, LocaleFormKeys, StructureObject } from "./global/types/forms";
export { InformationTableColumn } from "./components/components/information-table";
export { ActiveElement } from "./components/part-lookup/part-lookup";
export { AccordionItem } from "./components/components/shift-accordion";
export { ClaimPayload, ServiceItem, VehicleInformation } from "./global/types/vehicle-information";
export { ClaimFormType } from "./locales/vehicleLookup/claimableItems/type";
export { ActiveElement as ActiveElement1 } from "./components/vehicle-lookup/vehicle-lookup";
export namespace Components {
    interface ContactUsForm {
        "baseUrl": string;
        "brandId": string;
        "errorCallback": (error: any) => void;
        "language": LanguageKeys;
        "loadingChanges": (loading: boolean) => void;
        "queryString": string;
        "recaptchaKey": string;
        "structure": string;
        "successCallback": (values: any) => void;
        "theme": string;
    }
    interface DeadStockLookup {
        "baseUrl": string;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (partNumber?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: PartInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<PartInformation>) => Promise<void>;
    }
    interface DistributorLookup {
        "baseUrl": string;
        "errorCallback": (errorMessage: string) => void;
        "fetchData": (partNumber?: string, headers?: any) => Promise<void>;
        "hiddenFields"?: string;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString": string;
        "setData": (newData: PartInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<PartInformation>) => Promise<void>;
    }
    interface FlexibleContainer {
        "alwaysStrict"?: boolean;
        "classes"?: string;
        "containerClasses"?: string;
        "height"?: number | 'auto';
        "isOpened"?: boolean;
        "stopAnimation"?: boolean;
    }
    interface FormDialog {
        "dialogClosed": () => void;
        "errorMessage": string;
        "language": LanguageKeys;
    }
    interface FormInput {
        "class": string;
        "errorMessage": string;
        "form": FormHook<any>;
        "formLocaleName": LocaleFormKeys;
        "inputParams": InputParams;
        "inputPreFix": string;
        "isError": boolean;
        "isRequired": boolean;
        "label": string;
        "language": LanguageKeys;
        "numberDirection"?: boolean;
        "wrapperClass": string;
        "wrapperId": string;
    }
    interface FormSelect {
        "disabled": boolean;
        "errorMessage": string;
        "fetcher": FormSelectFetcher;
        "form": FormHook<any>;
        "formLocaleName": LocaleFormKeys;
        "isError": boolean;
        "isRequired": boolean;
        "label": string;
        "language": LanguageKeys;
        "name": string;
        "placeholder": string;
        "wrapperClass": string;
        "wrapperId": string;
    }
    interface FormShadowInput {
        "form": FormHook<any>;
        "name": string;
        "value": string;
    }
    interface FormStructure {
        "errorMessage": string;
        "form": FormHook<any>;
        "formElementMapper": FormElementMapper<any>;
        "isLoading": boolean;
        "language": LanguageKeys;
        "renderControl": {};
        "structure": string;
        "theme": string;
        "themes": any;
    }
    interface FormStructureError {
        "language": LanguageKeys;
    }
    interface FormSubmit {
        "isLoading": boolean;
        "language": LanguageKeys;
        "params": FormFieldParams;
        "structureElement": StructureObject;
    }
    interface FormTextArea {
        "errorMessage": string;
        "form": FormHook<any>;
        "formLocaleName": LocaleFormKeys;
        "inputParams": InputParams;
        "isError": boolean;
        "isRequired": boolean;
        "label": string;
        "language": LanguageKeys;
        "wrapperClass": string;
        "wrapperId": string;
    }
    interface InformationTable {
        "headers": InformationTableColumn[];
        "isLoading": boolean;
        "rows": object[];
        "templateRow": object;
    }
    interface LoadingSpinner {
        "isLoading": boolean;
    }
    interface ManufacturerLookup {
        "baseUrl": string;
        "errorCallback": (errorMessage: string) => void;
        "fetchData": (partNumber?: string, headers?: any) => Promise<void>;
        "headerTitle": string;
        "hiddenFields": string;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString": string;
        "setData": (newData: PartInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<PartInformation>) => Promise<void>;
    }
    interface PartLookup {
        "activeElement"?: ActiveElement;
        "baseUrl": string;
        "blazorErrorStateListener": string;
        "blazorOnLoadingStateChange": string;
        "childrenProps"?: string | Object;
        "errorStateListener"?: (newError: string) => void;
        "fetchPartNumber": (partNumber: string, quantity?: string, headers?: any) => Promise<string>;
        "language": LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString": string;
        "setBlazorRef": (newBlazorRef: DotNetObjectReference) => Promise<void>;
    }
    interface ServiceBookingForm {
        "baseUrl": string;
        "brandId": string;
        "errorCallback": (error: any) => void;
        "language": LanguageKeys;
        "loadingChanges": (loading: boolean) => void;
        "queryString": string;
        "recaptchaKey": string;
        "structure": string;
        "successCallback": (values: any) => void;
        "theme": string;
    }
    interface ShiftAccordion {
        "accordionClasses"?: string;
        "accordionContentClasses"?: string;
        "items": AccordionItem[];
    }
    interface ShiftSlider {
        "activeIndex": number;
        "components": (() => Node)[];
    }
    interface ShiftTabs {
        "activeTabIndex": number;
        "changeActiveTab": (newTabindex: number) => void;
        "containerClasses"?: string;
        "tabClasses"?: string;
        "tabs": string[];
    }
    interface VehicleAccessories {
        "baseUrl": string;
        "coreOny": boolean;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface VehicleClaimableItems {
        "activate"?: (vehicleInformation: VehicleInformation) => void;
        "baseUrl": string;
        "claim": (item: ServiceItem) => Promise<void>;
        "claimEndPoint": string;
        "completeClaim": () => Promise<void>;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "headers": any;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface VehicleItemClaimForm {
        "canceledItems"?: ServiceItem[];
        "getQrValue": () => Promise<string>;
        "handleClaiming"?: (payload: ClaimPayload) => void;
        "item"?: ServiceItem;
        "language": LanguageKeys;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "locale": ClaimFormType;
        "quite": () => Promise<void>;
        "unInvoicedByBrokerName"?: string;
        "vin"?: string;
    }
    interface VehicleLookup {
        "activeElement"?: ActiveElement1;
        "baseUrl": string;
        "blazorDynamicClaimActivate": string;
        "blazorErrorStateListener": string;
        "blazorOnLoadingStateChange": string;
        "childrenProps"?: string | Object;
        "componentListOrder": ActiveElement1[];
        "dynamicClaimActivate"?: (vehicleInformation: VehicleInformation) => void;
        "errorStateListener"?: (newError: string) => void;
        "fetchVin": (vin: string, headers?: any) => Promise<string>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString": string;
        "setBlazorRef": (newBlazorRef: DotNetObjectReference) => Promise<void>;
    }
    interface VehiclePaintThickness {
        "baseUrl": string;
        "coreOny": boolean;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface VehicleServiceHistory {
        "baseUrl": string;
        "coreOny": boolean;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface VehicleSpecification {
        "baseUrl": string;
        "coreOny": boolean;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
    }
    interface VehicleWarrantyDetails {
        "baseUrl": string;
        "brandIntegrationId": string;
        "cityId"?: string;
        "cityIntegrationId"?: string;
        "companyBranchId"?: string;
        "companyBranchIntegrationId"?: string;
        "companyId"?: string;
        "companyIntegrationId"?: string;
        "coreOny": boolean;
        "customerEmail"?: string;
        "customerName"?: string;
        "customerPhone"?: string;
        "errorCallback": (errorMessage: ErrorKeys) => void;
        "fetchData": (requestedVin?: string, headers?: any) => Promise<void>;
        "isDev": boolean;
        "language": LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString": string;
        "recaptchaKey": string;
        "setData": (newData: VehicleInformation | string, headers?: any) => Promise<void>;
        "setErrorMessage": (message: ErrorKeys) => Promise<void>;
        "setMockData": (newMockData: MockJson<VehicleInformation>) => Promise<void>;
        "showSsc": boolean;
        "showWarranty": boolean;
        "unauthorizedSscLookupBaseUrl": string;
        "unauthorizedSscLookupQueryString": string;
        "userId"?: string;
    }
    interface VinExtractor {
        "captureEnvironment": boolean;
        "captureInterval": number;
        "close": () => Promise<void>;
        "manualCapture": boolean;
        "ocrEndpoint": string;
        "onError"?: ((newError: Error) => void) | string;
        "onExtract"?: ((vin: string) => void) | string;
        "onOpenChange"?: ((newError: boolean) => void) | string;
        "onProcessing"?: ((vin: string) => void) | string;
        "open": () => Promise<void>;
        "readSticker": boolean;
        "setBlazorRef": (newBlazorRef: DotNetObjectReference) => Promise<void>;
        "skipValidation": boolean;
        "title": string;
        "uploaderButtonId": string;
        "useOcr": boolean;
        "verbose": boolean;
    }
}
declare global {
    interface HTMLContactUsFormElement extends Components.ContactUsForm, HTMLStencilElement {
    }
    var HTMLContactUsFormElement: {
        prototype: HTMLContactUsFormElement;
        new (): HTMLContactUsFormElement;
    };
    interface HTMLDeadStockLookupElement extends Components.DeadStockLookup, HTMLStencilElement {
    }
    var HTMLDeadStockLookupElement: {
        prototype: HTMLDeadStockLookupElement;
        new (): HTMLDeadStockLookupElement;
    };
    interface HTMLDistributorLookupElement extends Components.DistributorLookup, HTMLStencilElement {
    }
    var HTMLDistributorLookupElement: {
        prototype: HTMLDistributorLookupElement;
        new (): HTMLDistributorLookupElement;
    };
    interface HTMLFlexibleContainerElement extends Components.FlexibleContainer, HTMLStencilElement {
    }
    var HTMLFlexibleContainerElement: {
        prototype: HTMLFlexibleContainerElement;
        new (): HTMLFlexibleContainerElement;
    };
    interface HTMLFormDialogElement extends Components.FormDialog, HTMLStencilElement {
    }
    var HTMLFormDialogElement: {
        prototype: HTMLFormDialogElement;
        new (): HTMLFormDialogElement;
    };
    interface HTMLFormInputElement extends Components.FormInput, HTMLStencilElement {
    }
    var HTMLFormInputElement: {
        prototype: HTMLFormInputElement;
        new (): HTMLFormInputElement;
    };
    interface HTMLFormSelectElement extends Components.FormSelect, HTMLStencilElement {
    }
    var HTMLFormSelectElement: {
        prototype: HTMLFormSelectElement;
        new (): HTMLFormSelectElement;
    };
    interface HTMLFormShadowInputElement extends Components.FormShadowInput, HTMLStencilElement {
    }
    var HTMLFormShadowInputElement: {
        prototype: HTMLFormShadowInputElement;
        new (): HTMLFormShadowInputElement;
    };
    interface HTMLFormStructureElement extends Components.FormStructure, HTMLStencilElement {
    }
    var HTMLFormStructureElement: {
        prototype: HTMLFormStructureElement;
        new (): HTMLFormStructureElement;
    };
    interface HTMLFormStructureErrorElement extends Components.FormStructureError, HTMLStencilElement {
    }
    var HTMLFormStructureErrorElement: {
        prototype: HTMLFormStructureErrorElement;
        new (): HTMLFormStructureErrorElement;
    };
    interface HTMLFormSubmitElement extends Components.FormSubmit, HTMLStencilElement {
    }
    var HTMLFormSubmitElement: {
        prototype: HTMLFormSubmitElement;
        new (): HTMLFormSubmitElement;
    };
    interface HTMLFormTextAreaElement extends Components.FormTextArea, HTMLStencilElement {
    }
    var HTMLFormTextAreaElement: {
        prototype: HTMLFormTextAreaElement;
        new (): HTMLFormTextAreaElement;
    };
    interface HTMLInformationTableElement extends Components.InformationTable, HTMLStencilElement {
    }
    var HTMLInformationTableElement: {
        prototype: HTMLInformationTableElement;
        new (): HTMLInformationTableElement;
    };
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLManufacturerLookupElement extends Components.ManufacturerLookup, HTMLStencilElement {
    }
    var HTMLManufacturerLookupElement: {
        prototype: HTMLManufacturerLookupElement;
        new (): HTMLManufacturerLookupElement;
    };
    interface HTMLPartLookupElement extends Components.PartLookup, HTMLStencilElement {
    }
    var HTMLPartLookupElement: {
        prototype: HTMLPartLookupElement;
        new (): HTMLPartLookupElement;
    };
    interface HTMLServiceBookingFormElement extends Components.ServiceBookingForm, HTMLStencilElement {
    }
    var HTMLServiceBookingFormElement: {
        prototype: HTMLServiceBookingFormElement;
        new (): HTMLServiceBookingFormElement;
    };
    interface HTMLShiftAccordionElement extends Components.ShiftAccordion, HTMLStencilElement {
    }
    var HTMLShiftAccordionElement: {
        prototype: HTMLShiftAccordionElement;
        new (): HTMLShiftAccordionElement;
    };
    interface HTMLShiftSliderElement extends Components.ShiftSlider, HTMLStencilElement {
    }
    var HTMLShiftSliderElement: {
        prototype: HTMLShiftSliderElement;
        new (): HTMLShiftSliderElement;
    };
    interface HTMLShiftTabsElement extends Components.ShiftTabs, HTMLStencilElement {
    }
    var HTMLShiftTabsElement: {
        prototype: HTMLShiftTabsElement;
        new (): HTMLShiftTabsElement;
    };
    interface HTMLVehicleAccessoriesElement extends Components.VehicleAccessories, HTMLStencilElement {
    }
    var HTMLVehicleAccessoriesElement: {
        prototype: HTMLVehicleAccessoriesElement;
        new (): HTMLVehicleAccessoriesElement;
    };
    interface HTMLVehicleClaimableItemsElement extends Components.VehicleClaimableItems, HTMLStencilElement {
    }
    var HTMLVehicleClaimableItemsElement: {
        prototype: HTMLVehicleClaimableItemsElement;
        new (): HTMLVehicleClaimableItemsElement;
    };
    interface HTMLVehicleItemClaimFormElement extends Components.VehicleItemClaimForm, HTMLStencilElement {
    }
    var HTMLVehicleItemClaimFormElement: {
        prototype: HTMLVehicleItemClaimFormElement;
        new (): HTMLVehicleItemClaimFormElement;
    };
    interface HTMLVehicleLookupElement extends Components.VehicleLookup, HTMLStencilElement {
    }
    var HTMLVehicleLookupElement: {
        prototype: HTMLVehicleLookupElement;
        new (): HTMLVehicleLookupElement;
    };
    interface HTMLVehiclePaintThicknessElement extends Components.VehiclePaintThickness, HTMLStencilElement {
    }
    var HTMLVehiclePaintThicknessElement: {
        prototype: HTMLVehiclePaintThicknessElement;
        new (): HTMLVehiclePaintThicknessElement;
    };
    interface HTMLVehicleServiceHistoryElement extends Components.VehicleServiceHistory, HTMLStencilElement {
    }
    var HTMLVehicleServiceHistoryElement: {
        prototype: HTMLVehicleServiceHistoryElement;
        new (): HTMLVehicleServiceHistoryElement;
    };
    interface HTMLVehicleSpecificationElement extends Components.VehicleSpecification, HTMLStencilElement {
    }
    var HTMLVehicleSpecificationElement: {
        prototype: HTMLVehicleSpecificationElement;
        new (): HTMLVehicleSpecificationElement;
    };
    interface HTMLVehicleWarrantyDetailsElement extends Components.VehicleWarrantyDetails, HTMLStencilElement {
    }
    var HTMLVehicleWarrantyDetailsElement: {
        prototype: HTMLVehicleWarrantyDetailsElement;
        new (): HTMLVehicleWarrantyDetailsElement;
    };
    interface HTMLVinExtractorElement extends Components.VinExtractor, HTMLStencilElement {
    }
    var HTMLVinExtractorElement: {
        prototype: HTMLVinExtractorElement;
        new (): HTMLVinExtractorElement;
    };
    interface HTMLElementTagNameMap {
        "contact-us-form": HTMLContactUsFormElement;
        "dead-stock-lookup": HTMLDeadStockLookupElement;
        "distributor-lookup": HTMLDistributorLookupElement;
        "flexible-container": HTMLFlexibleContainerElement;
        "form-dialog": HTMLFormDialogElement;
        "form-input": HTMLFormInputElement;
        "form-select": HTMLFormSelectElement;
        "form-shadow-input": HTMLFormShadowInputElement;
        "form-structure": HTMLFormStructureElement;
        "form-structure-error": HTMLFormStructureErrorElement;
        "form-submit": HTMLFormSubmitElement;
        "form-text-area": HTMLFormTextAreaElement;
        "information-table": HTMLInformationTableElement;
        "loading-spinner": HTMLLoadingSpinnerElement;
        "manufacturer-lookup": HTMLManufacturerLookupElement;
        "part-lookup": HTMLPartLookupElement;
        "service-booking-form": HTMLServiceBookingFormElement;
        "shift-accordion": HTMLShiftAccordionElement;
        "shift-slider": HTMLShiftSliderElement;
        "shift-tabs": HTMLShiftTabsElement;
        "vehicle-accessories": HTMLVehicleAccessoriesElement;
        "vehicle-claimable-items": HTMLVehicleClaimableItemsElement;
        "vehicle-item-claim-form": HTMLVehicleItemClaimFormElement;
        "vehicle-lookup": HTMLVehicleLookupElement;
        "vehicle-paint-thickness": HTMLVehiclePaintThicknessElement;
        "vehicle-service-history": HTMLVehicleServiceHistoryElement;
        "vehicle-specification": HTMLVehicleSpecificationElement;
        "vehicle-warranty-details": HTMLVehicleWarrantyDetailsElement;
        "vin-extractor": HTMLVinExtractorElement;
    }
}
declare namespace LocalJSX {
    interface ContactUsForm {
        "baseUrl"?: string;
        "brandId"?: string;
        "errorCallback"?: (error: any) => void;
        "language"?: LanguageKeys;
        "loadingChanges"?: (loading: boolean) => void;
        "queryString"?: string;
        "recaptchaKey"?: string;
        "structure"?: string;
        "successCallback"?: (values: any) => void;
        "theme"?: string;
    }
    interface DeadStockLookup {
        "baseUrl"?: string;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface DistributorLookup {
        "baseUrl"?: string;
        "errorCallback"?: (errorMessage: string) => void;
        "hiddenFields"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString"?: string;
    }
    interface FlexibleContainer {
        "alwaysStrict"?: boolean;
        "classes"?: string;
        "containerClasses"?: string;
        "height"?: number | 'auto';
        "isOpened"?: boolean;
        "stopAnimation"?: boolean;
    }
    interface FormDialog {
        "dialogClosed"?: () => void;
        "errorMessage"?: string;
        "language"?: LanguageKeys;
    }
    interface FormInput {
        "class"?: string;
        "errorMessage"?: string;
        "form"?: FormHook<any>;
        "formLocaleName"?: LocaleFormKeys;
        "inputParams"?: InputParams;
        "inputPreFix"?: string;
        "isError"?: boolean;
        "isRequired"?: boolean;
        "label"?: string;
        "language"?: LanguageKeys;
        "numberDirection"?: boolean;
        "wrapperClass"?: string;
        "wrapperId"?: string;
    }
    interface FormSelect {
        "disabled"?: boolean;
        "errorMessage"?: string;
        "fetcher"?: FormSelectFetcher;
        "form"?: FormHook<any>;
        "formLocaleName"?: LocaleFormKeys;
        "isError"?: boolean;
        "isRequired"?: boolean;
        "label"?: string;
        "language"?: LanguageKeys;
        "name"?: string;
        "placeholder"?: string;
        "wrapperClass"?: string;
        "wrapperId"?: string;
    }
    interface FormShadowInput {
        "form"?: FormHook<any>;
        "name"?: string;
        "value"?: string;
    }
    interface FormStructure {
        "errorMessage"?: string;
        "form"?: FormHook<any>;
        "formElementMapper"?: FormElementMapper<any>;
        "isLoading"?: boolean;
        "language"?: LanguageKeys;
        "renderControl"?: {};
        "structure"?: string;
        "theme"?: string;
        "themes"?: any;
    }
    interface FormStructureError {
        "language"?: LanguageKeys;
    }
    interface FormSubmit {
        "isLoading"?: boolean;
        "language"?: LanguageKeys;
        "params"?: FormFieldParams;
        "structureElement"?: StructureObject;
    }
    interface FormTextArea {
        "errorMessage"?: string;
        "form"?: FormHook<any>;
        "formLocaleName"?: LocaleFormKeys;
        "inputParams"?: InputParams;
        "isError"?: boolean;
        "isRequired"?: boolean;
        "label"?: string;
        "language"?: LanguageKeys;
        "wrapperClass"?: string;
        "wrapperId"?: string;
    }
    interface InformationTable {
        "headers"?: InformationTableColumn[];
        "isLoading"?: boolean;
        "rows"?: object[];
        "templateRow"?: object;
    }
    interface LoadingSpinner {
        "isLoading"?: boolean;
    }
    interface ManufacturerLookup {
        "baseUrl"?: string;
        "errorCallback"?: (errorMessage: string) => void;
        "headerTitle"?: string;
        "hiddenFields"?: string;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: PartInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "localizationName"?: string;
        "queryString"?: string;
    }
    interface PartLookup {
        "activeElement"?: ActiveElement;
        "baseUrl"?: string;
        "blazorErrorStateListener"?: string;
        "blazorOnLoadingStateChange"?: string;
        "childrenProps"?: string | Object;
        "errorStateListener"?: (newError: string) => void;
        "language"?: LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface ServiceBookingForm {
        "baseUrl"?: string;
        "brandId"?: string;
        "errorCallback"?: (error: any) => void;
        "language"?: LanguageKeys;
        "loadingChanges"?: (loading: boolean) => void;
        "queryString"?: string;
        "recaptchaKey"?: string;
        "structure"?: string;
        "successCallback"?: (values: any) => void;
        "theme"?: string;
    }
    interface ShiftAccordion {
        "accordionClasses"?: string;
        "accordionContentClasses"?: string;
        "items"?: AccordionItem[];
    }
    interface ShiftSlider {
        "activeIndex"?: number;
        "components"?: (() => Node)[];
    }
    interface ShiftTabs {
        "activeTabIndex"?: number;
        "changeActiveTab"?: (newTabindex: number) => void;
        "containerClasses"?: string;
        "tabClasses"?: string;
        "tabs"?: string[];
    }
    interface VehicleAccessories {
        "baseUrl"?: string;
        "coreOny"?: boolean;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleClaimableItems {
        "activate"?: (vehicleInformation: VehicleInformation) => void;
        "baseUrl"?: string;
        "claimEndPoint"?: string;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "headers"?: any;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleItemClaimForm {
        "canceledItems"?: ServiceItem[];
        "handleClaiming"?: (payload: ClaimPayload) => void;
        "item"?: ServiceItem;
        "language"?: LanguageKeys;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "locale"?: ClaimFormType;
        "unInvoicedByBrokerName"?: string;
        "vin"?: string;
    }
    interface VehicleLookup {
        "activeElement"?: ActiveElement1;
        "baseUrl"?: string;
        "blazorDynamicClaimActivate"?: string;
        "blazorErrorStateListener"?: string;
        "blazorOnLoadingStateChange"?: string;
        "childrenProps"?: string | Object;
        "componentListOrder"?: ActiveElement1[];
        "dynamicClaimActivate"?: (vehicleInformation: VehicleInformation) => void;
        "errorStateListener"?: (newError: string) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadingStateChanged"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehiclePaintThickness {
        "baseUrl"?: string;
        "coreOny"?: boolean;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleServiceHistory {
        "baseUrl"?: string;
        "coreOny"?: boolean;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleSpecification {
        "baseUrl"?: string;
        "coreOny"?: boolean;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
    }
    interface VehicleWarrantyDetails {
        "baseUrl"?: string;
        "brandIntegrationId"?: string;
        "cityId"?: string;
        "cityIntegrationId"?: string;
        "companyBranchId"?: string;
        "companyBranchIntegrationId"?: string;
        "companyId"?: string;
        "companyIntegrationId"?: string;
        "coreOny"?: boolean;
        "customerEmail"?: string;
        "customerName"?: string;
        "customerPhone"?: string;
        "errorCallback"?: (errorMessage: ErrorKeys) => void;
        "isDev"?: boolean;
        "language"?: LanguageKeys;
        "loadedResponse"?: (response: VehicleInformation) => void;
        "loadingStateChange"?: (isLoading: boolean) => void;
        "queryString"?: string;
        "recaptchaKey"?: string;
        "showSsc"?: boolean;
        "showWarranty"?: boolean;
        "unauthorizedSscLookupBaseUrl"?: string;
        "unauthorizedSscLookupQueryString"?: string;
        "userId"?: string;
    }
    interface VinExtractor {
        "captureEnvironment"?: boolean;
        "captureInterval"?: number;
        "manualCapture"?: boolean;
        "ocrEndpoint"?: string;
        "onError"?: ((newError: Error) => void) | string;
        "onExtract"?: ((vin: string) => void) | string;
        "onOpenChange"?: ((newError: boolean) => void) | string;
        "onProcessing"?: ((vin: string) => void) | string;
        "readSticker"?: boolean;
        "skipValidation"?: boolean;
        "title"?: string;
        "uploaderButtonId"?: string;
        "useOcr"?: boolean;
        "verbose"?: boolean;
    }
    interface IntrinsicElements {
        "contact-us-form": ContactUsForm;
        "dead-stock-lookup": DeadStockLookup;
        "distributor-lookup": DistributorLookup;
        "flexible-container": FlexibleContainer;
        "form-dialog": FormDialog;
        "form-input": FormInput;
        "form-select": FormSelect;
        "form-shadow-input": FormShadowInput;
        "form-structure": FormStructure;
        "form-structure-error": FormStructureError;
        "form-submit": FormSubmit;
        "form-text-area": FormTextArea;
        "information-table": InformationTable;
        "loading-spinner": LoadingSpinner;
        "manufacturer-lookup": ManufacturerLookup;
        "part-lookup": PartLookup;
        "service-booking-form": ServiceBookingForm;
        "shift-accordion": ShiftAccordion;
        "shift-slider": ShiftSlider;
        "shift-tabs": ShiftTabs;
        "vehicle-accessories": VehicleAccessories;
        "vehicle-claimable-items": VehicleClaimableItems;
        "vehicle-item-claim-form": VehicleItemClaimForm;
        "vehicle-lookup": VehicleLookup;
        "vehicle-paint-thickness": VehiclePaintThickness;
        "vehicle-service-history": VehicleServiceHistory;
        "vehicle-specification": VehicleSpecification;
        "vehicle-warranty-details": VehicleWarrantyDetails;
        "vin-extractor": VinExtractor;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "contact-us-form": LocalJSX.ContactUsForm & JSXBase.HTMLAttributes<HTMLContactUsFormElement>;
            "dead-stock-lookup": LocalJSX.DeadStockLookup & JSXBase.HTMLAttributes<HTMLDeadStockLookupElement>;
            "distributor-lookup": LocalJSX.DistributorLookup & JSXBase.HTMLAttributes<HTMLDistributorLookupElement>;
            "flexible-container": LocalJSX.FlexibleContainer & JSXBase.HTMLAttributes<HTMLFlexibleContainerElement>;
            "form-dialog": LocalJSX.FormDialog & JSXBase.HTMLAttributes<HTMLFormDialogElement>;
            "form-input": LocalJSX.FormInput & JSXBase.HTMLAttributes<HTMLFormInputElement>;
            "form-select": LocalJSX.FormSelect & JSXBase.HTMLAttributes<HTMLFormSelectElement>;
            "form-shadow-input": LocalJSX.FormShadowInput & JSXBase.HTMLAttributes<HTMLFormShadowInputElement>;
            "form-structure": LocalJSX.FormStructure & JSXBase.HTMLAttributes<HTMLFormStructureElement>;
            "form-structure-error": LocalJSX.FormStructureError & JSXBase.HTMLAttributes<HTMLFormStructureErrorElement>;
            "form-submit": LocalJSX.FormSubmit & JSXBase.HTMLAttributes<HTMLFormSubmitElement>;
            "form-text-area": LocalJSX.FormTextArea & JSXBase.HTMLAttributes<HTMLFormTextAreaElement>;
            "information-table": LocalJSX.InformationTable & JSXBase.HTMLAttributes<HTMLInformationTableElement>;
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "manufacturer-lookup": LocalJSX.ManufacturerLookup & JSXBase.HTMLAttributes<HTMLManufacturerLookupElement>;
            "part-lookup": LocalJSX.PartLookup & JSXBase.HTMLAttributes<HTMLPartLookupElement>;
            "service-booking-form": LocalJSX.ServiceBookingForm & JSXBase.HTMLAttributes<HTMLServiceBookingFormElement>;
            "shift-accordion": LocalJSX.ShiftAccordion & JSXBase.HTMLAttributes<HTMLShiftAccordionElement>;
            "shift-slider": LocalJSX.ShiftSlider & JSXBase.HTMLAttributes<HTMLShiftSliderElement>;
            "shift-tabs": LocalJSX.ShiftTabs & JSXBase.HTMLAttributes<HTMLShiftTabsElement>;
            "vehicle-accessories": LocalJSX.VehicleAccessories & JSXBase.HTMLAttributes<HTMLVehicleAccessoriesElement>;
            "vehicle-claimable-items": LocalJSX.VehicleClaimableItems & JSXBase.HTMLAttributes<HTMLVehicleClaimableItemsElement>;
            "vehicle-item-claim-form": LocalJSX.VehicleItemClaimForm & JSXBase.HTMLAttributes<HTMLVehicleItemClaimFormElement>;
            "vehicle-lookup": LocalJSX.VehicleLookup & JSXBase.HTMLAttributes<HTMLVehicleLookupElement>;
            "vehicle-paint-thickness": LocalJSX.VehiclePaintThickness & JSXBase.HTMLAttributes<HTMLVehiclePaintThicknessElement>;
            "vehicle-service-history": LocalJSX.VehicleServiceHistory & JSXBase.HTMLAttributes<HTMLVehicleServiceHistoryElement>;
            "vehicle-specification": LocalJSX.VehicleSpecification & JSXBase.HTMLAttributes<HTMLVehicleSpecificationElement>;
            "vehicle-warranty-details": LocalJSX.VehicleWarrantyDetails & JSXBase.HTMLAttributes<HTMLVehicleWarrantyDetailsElement>;
            "vin-extractor": LocalJSX.VinExtractor & JSXBase.HTMLAttributes<HTMLVinExtractorElement>;
        }
    }
}
