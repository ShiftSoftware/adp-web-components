import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const TYPE_FILE = 'type.ts';
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const BASE_DIR = path.resolve(__dirname, './src/locales');

const OUTPUT_FILE = path.join(BASE_DIR, '../locale-mapper.ts');

function walk(folderName, parents, map, preFixPath, currentPath) {
  const folderPath = path.join(currentPath, folderName);

  const reqPath = (folderPath.replace(preFixPath, '') + '/').replaceAll(/\\/g, '/');

  if (fs.existsSync(path.join(folderPath, TYPE_FILE))) {
    map[[...parents, folderName].join('.')] = [reqPath];
    parents.forEach(parent => {
      if (map[parent]) map[parent].push(reqPath);
      else map[parent] = [reqPath];
    });
  }

  const folders = fs.readdirSync(folderPath, { withFileTypes: true }).filter(entry => entry.isDirectory());

  folders.forEach(folder => {
    walk(folder.name, [...parents, folderName], map, preFixPath, folderPath);
  });
}

function generateLocaleMap() {
  const map = {
    '-': ['locales/'],
  };

  const folders = fs.readdirSync(BASE_DIR, { withFileTypes: true }).filter(entry => entry.isDirectory());

  const preFixPath = path.join(BASE_DIR, '../');

  folders.forEach(folder => {
    walk(folder.name, [], map, preFixPath, BASE_DIR);
  });

  Object.entries(map).forEach(([key, value]) => {
    if (value.length > 1) {
      const shortestPath = value.reduce((a, b) => (a.length <= b.length ? a : b));

      if (shortestPath.endsWith(key + '/')) map[key + '*'] = [shortestPath];
    }
  });

  const tsContent =
    `// This file is auto-generated. Do not edit it manually.\n` +
    '// Use command: yarn generate-locale-mapper\n' +
    `// It is generated by the script located at: ${path.relative(__dirname, fileURLToPath(import.meta.url))}\n\n` +
    `const localeMapper = ${JSON.stringify(map, null, 2)} as const;\n\n` +
    `export default localeMapper;\n`;

  fs.writeFileSync(OUTPUT_FILE, tsContent, 'utf-8');
  console.log(`âœ… Generated: ${OUTPUT_FILE}`);
}

generateLocaleMap();
